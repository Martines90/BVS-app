/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers";
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from "./common";

export declare namespace BVS_Voting {
  export type VotingStruct = {
    approved: boolean;
    cancelled: boolean;
    key: BytesLike;
    budget: BigNumberish;
    voteCount: BigNumberish;
    creator: AddressLike;
    contentIpfsHash: string;
    startDate: BigNumberish;
    voteOnAScore: BigNumberish;
    voteOnBScore: BigNumberish;
    votingContentCheckQuizIpfsHash: string;
  };

  export type VotingStructOutput = [
    approved: boolean,
    cancelled: boolean,
    key: string,
    budget: bigint,
    voteCount: bigint,
    creator: string,
    contentIpfsHash: string,
    startDate: bigint,
    voteOnAScore: bigint,
    voteOnBScore: bigint,
    votingContentCheckQuizIpfsHash: string
  ] & {
    approved: boolean;
    cancelled: boolean;
    key: string;
    budget: bigint;
    voteCount: bigint;
    creator: string;
    contentIpfsHash: string;
    startDate: bigint;
    voteOnAScore: bigint;
    voteOnBScore: bigint;
    votingContentCheckQuizIpfsHash: string;
  };
}

export interface BVS_VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMINISTRATOR"
      | "APPROVE_VOTING_BEFORE_IT_STARTS_LIMIT"
      | "ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS"
      | "ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS"
      | "CITIZEN"
      | "ELECTION_START_END_INTERVAL"
      | "MAX_DAILY_NEW_CITIZENS_CAN_ADD_PERCENTAGE"
      | "MINIMUM_PERCENTAGE_OF_ELECTION_VOTES"
      | "MIN_PERCENTAGE_GRANT_ADMIN_APPROVALS_REQUIRED"
      | "MIN_PERCENTAGE_OF_VOTES"
      | "MIN_TOTAL_CONTENT_READ_CHECK_ANSWER"
      | "MIN_VOTE_SCORE"
      | "NEW_VOTING_PERIOD_MIN_SCHEDULE_AHEAD_TIME"
      | "POLITICAL_ACTOR"
      | "VOTING_CHECK_ASKED_NUM_OF_QUESTIONS"
      | "VOTING_CYCLE_INTERVAL"
      | "VOTING_DURATION"
      | "addKeccak256HashedAnswersToArticle"
      | "addKeccak256HashedAnswersToArticleResponse"
      | "addKeccak256HashedAnswersToVotingContent"
      | "adminApprovalSentToAccount"
      | "adminRoleGrantApprovals"
      | "admins"
      | "applyForCitizenshipRole"
      | "applyForElections"
      | "approveVoting"
      | "articleContentReadCheckAnswers"
      | "articleContentResponseReadCheckAnswers"
      | "articleKeys"
      | "articlesCompleted"
      | "articlesResponseCompleted"
      | "assignQuizIpfsHashToArticleOrResponse"
      | "assignQuizIpfsHashToVoting"
      | "calculateVoteScore"
      | "checkIfAccounthasRole"
      | "citizenRoleApplicationFee"
      | "citizens"
      | "citizenshipApplications"
      | "closeElections"
      | "completeContentReadQuiz"
      | "creationDate"
      | "dailyCitizenRoleModifyCredit"
      | "electionCandidateScores"
      | "electionCandidates"
      | "electionVoters"
      | "electionVotes"
      | "electionsCandidateApplicationFee"
      | "electionsEndDate"
      | "electionsStartDate"
      | "firstVotingCycleStartDate"
      | "getAccountArticleQuizAnswerIndexes"
      | "getAccountArticleResponseQuizAnswerIndexes"
      | "getAccountVotingQuizAnswerIndexes"
      | "getAdminsSize"
      | "getArticleKeysLength"
      | "getBlockTime"
      | "getCitizensSize"
      | "getElectionCandidatesSize"
      | "getElectionVotersSize"
      | "getPoliticalActorsSize"
      | "getVotinCycleIndexesSize"
      | "getVoting"
      | "getVotingKeysLength"
      | "grantCitizenRole"
      | "hasRole"
      | "isContentReadQuizCorrect"
      | "isEmptyString"
      | "isVotingWon"
      | "politicalActorVotingCredits"
      | "politicalActors"
      | "proConArticles"
      | "publishArticleToVotingsCount"
      | "publishProConArticle"
      | "publishProConArticleResponse"
      | "revokeAdminRoleApproval"
      | "scheduleNewVoting"
      | "scheduleNextElections"
      | "sendGrantAdministratorRoleApproval"
      | "setFirstVotingCycleStartDate"
      | "unlockVotingBudget"
      | "updateCitizenshipRoleApplicationFee"
      | "voteOnElections"
      | "voteOnVoting"
      | "votes"
      | "votingContentReadCheckAnswers"
      | "votingCycleIndexes"
      | "votingCycleStartVoteCount"
      | "votingKeys"
      | "votings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CitizenshipRoleGranted"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMINISTRATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APPROVE_VOTING_BEFORE_IT_STARTS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CITIZEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ELECTION_START_END_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_NEW_CITIZENS_CAN_ADD_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_PERCENTAGE_OF_ELECTION_VOTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PERCENTAGE_GRANT_ADMIN_APPROVALS_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PERCENTAGE_OF_VOTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TOTAL_CONTENT_READ_CHECK_ANSWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTE_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NEW_VOTING_PERIOD_MIN_SCHEDULE_AHEAD_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLITICAL_ACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_CHECK_ASKED_NUM_OF_QUESTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_CYCLE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addKeccak256HashedAnswersToArticle",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addKeccak256HashedAnswersToArticleResponse",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addKeccak256HashedAnswersToVotingContent",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "adminApprovalSentToAccount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRoleGrantApprovals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForCitizenshipRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applyForElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveVoting",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "articleContentReadCheckAnswers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "articleContentResponseReadCheckAnswers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "articleKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "articlesCompleted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "articlesResponseCompleted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignQuizIpfsHashToArticleOrResponse",
    values: [BytesLike, BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "assignQuizIpfsHashToVoting",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVoteScore",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfAccounthasRole",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "citizenRoleApplicationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "citizens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "citizenshipApplications",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeContentReadQuiz",
    values: [BigNumberish, BytesLike, BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "creationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyCitizenRoleModifyCredit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCandidateScores",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "electionsCandidateApplicationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionsEndDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionsStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstVotingCycleStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountArticleQuizAnswerIndexes",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountArticleResponseQuizAnswerIndexes",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountVotingQuizAnswerIndexes",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminsSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArticleKeysLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCitizensSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionCandidatesSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionVotersSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoliticalActorsSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotinCycleIndexesSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoting",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingKeysLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantCitizenRole",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isContentReadQuizCorrect",
    values: [BigNumberish[], BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmptyString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingWon",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "politicalActorVotingCredits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "politicalActors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proConArticles",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishArticleToVotingsCount",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishProConArticle",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "publishProConArticleResponse",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdminRoleApproval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleNewVoting",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleNextElections",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendGrantAdministratorRoleApproval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFirstVotingCycleStartDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockVotingBudget",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCitizenshipRoleApplicationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnElections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnVoting",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingContentReadCheckAnswers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingCycleIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingCycleStartVoteCount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "votings", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "ADMINISTRATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APPROVE_VOTING_BEFORE_IT_STARTS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CITIZEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ELECTION_START_END_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_NEW_CITIZENS_CAN_ADD_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_PERCENTAGE_OF_ELECTION_VOTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PERCENTAGE_GRANT_ADMIN_APPROVALS_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PERCENTAGE_OF_VOTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TOTAL_CONTENT_READ_CHECK_ANSWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTE_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NEW_VOTING_PERIOD_MIN_SCHEDULE_AHEAD_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLITICAL_ACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_CHECK_ASKED_NUM_OF_QUESTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_CYCLE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKeccak256HashedAnswersToArticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKeccak256HashedAnswersToArticleResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKeccak256HashedAnswersToVotingContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminApprovalSentToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRoleGrantApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyForCitizenshipRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyForElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articleContentReadCheckAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articleContentResponseReadCheckAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articleKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articlesCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articlesResponseCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignQuizIpfsHashToArticleOrResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignQuizIpfsHashToVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVoteScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfAccounthasRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "citizenRoleApplicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "citizens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "citizenshipApplications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeContentReadQuiz",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyCitizenRoleModifyCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCandidateScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionsCandidateApplicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionsEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionsStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstVotingCycleStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountArticleQuizAnswerIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountArticleResponseQuizAnswerIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountVotingQuizAnswerIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminsSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArticleKeysLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCitizensSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionCandidatesSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionVotersSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoliticalActorsSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotinCycleIndexesSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingKeysLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCitizenRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isContentReadQuizCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmptyString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVotingWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "politicalActorVotingCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "politicalActors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proConArticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishArticleToVotingsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishProConArticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishProConArticleResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdminRoleApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleNewVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleNextElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendGrantAdministratorRoleApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFirstVotingCycleStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockVotingBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCitizenshipRoleApplicationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingContentReadCheckAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCycleIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCycleStartVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votingKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votings", data: BytesLike): Result;
}

export namespace CitizenshipRoleGrantedEvent {
  export type InputTuple = [to: AddressLike, from: AddressLike];
  export type OutputTuple = [to: string, from: string];
  export interface OutputObject {
    to: string;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    executer: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, executer: string];
  export interface OutputObject {
    role: string;
    account: string;
    executer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    executer: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, executer: string];
  export interface OutputObject {
    role: string;
    account: string;
    executer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BVS_Voting extends BaseContract {
  connect(runner?: ContractRunner | null): BVS_Voting;
  waitForDeployment(): Promise<this>;

  interface: BVS_VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMINISTRATOR: TypedContractMethod<[], [string], "view">;

  APPROVE_VOTING_BEFORE_IT_STARTS_LIMIT: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  CITIZEN: TypedContractMethod<[], [string], "view">;

  ELECTION_START_END_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_NEW_CITIZENS_CAN_ADD_PERCENTAGE: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  MINIMUM_PERCENTAGE_OF_ELECTION_VOTES: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  MIN_PERCENTAGE_GRANT_ADMIN_APPROVALS_REQUIRED: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  MIN_PERCENTAGE_OF_VOTES: TypedContractMethod<[], [bigint], "view">;

  MIN_TOTAL_CONTENT_READ_CHECK_ANSWER: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  MIN_VOTE_SCORE: TypedContractMethod<[], [bigint], "view">;

  NEW_VOTING_PERIOD_MIN_SCHEDULE_AHEAD_TIME: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  POLITICAL_ACTOR: TypedContractMethod<[], [string], "view">;

  VOTING_CHECK_ASKED_NUM_OF_QUESTIONS: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  VOTING_CYCLE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  VOTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  addKeccak256HashedAnswersToArticle: TypedContractMethod<
    [
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _keccak256HashedAnswers: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  addKeccak256HashedAnswersToArticleResponse: TypedContractMethod<
    [
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _keccak256HashedAnswers: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  addKeccak256HashedAnswersToVotingContent: TypedContractMethod<
    [_votingKey: BytesLike, _keccak256HashedAnswers: BytesLike[]],
    [void],
    "nonpayable"
  >;

  adminApprovalSentToAccount: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  adminRoleGrantApprovals: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  admins: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  applyForCitizenshipRole: TypedContractMethod<
    [_emailPublicKeyCombinedHash: BytesLike],
    [void],
    "payable"
  >;

  applyForElections: TypedContractMethod<[], [void], "payable">;

  approveVoting: TypedContractMethod<
    [_votingKey: BytesLike],
    [void],
    "nonpayable"
  >;

  articleContentReadCheckAnswers: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  articleContentResponseReadCheckAnswers: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  articleKeys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  articlesCompleted: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  articlesResponseCompleted: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  assignQuizIpfsHashToArticleOrResponse: TypedContractMethod<
    [
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _quizIpfsHash: string,
      assignToArticleContent: boolean
    ],
    [void],
    "nonpayable"
  >;

  assignQuizIpfsHashToVoting: TypedContractMethod<
    [_votingKey: BytesLike, _quizIpfsHash: string],
    [void],
    "nonpayable"
  >;

  calculateVoteScore: TypedContractMethod<
    [_votingKey: BytesLike, _account: AddressLike],
    [bigint],
    "view"
  >;

  checkIfAccounthasRole: TypedContractMethod<
    [_account: AddressLike, _role: BytesLike],
    [boolean],
    "view"
  >;

  citizenRoleApplicationFee: TypedContractMethod<[], [bigint], "view">;

  citizens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  citizenshipApplications: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  closeElections: TypedContractMethod<[], [void], "nonpayable">;

  completeContentReadQuiz: TypedContractMethod<
    [
      contentType: BigNumberish,
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _answers: string[]
    ],
    [void],
    "nonpayable"
  >;

  creationDate: TypedContractMethod<[], [bigint], "view">;

  dailyCitizenRoleModifyCredit: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  electionCandidateScores: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  electionCandidates: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  electionVoters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  electionVotes: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  electionsCandidateApplicationFee: TypedContractMethod<[], [bigint], "view">;

  electionsEndDate: TypedContractMethod<[], [bigint], "view">;

  electionsStartDate: TypedContractMethod<[], [bigint], "view">;

  firstVotingCycleStartDate: TypedContractMethod<[], [bigint], "view">;

  getAccountArticleQuizAnswerIndexes: TypedContractMethod<
    [_votingKey: BytesLike, _articleKey: BytesLike, _account: AddressLike],
    [bigint[]],
    "view"
  >;

  getAccountArticleResponseQuizAnswerIndexes: TypedContractMethod<
    [_votingKey: BytesLike, _articleKey: BytesLike, _account: AddressLike],
    [bigint[]],
    "view"
  >;

  getAccountVotingQuizAnswerIndexes: TypedContractMethod<
    [_votingKey: BytesLike, _account: AddressLike],
    [bigint[]],
    "view"
  >;

  getAdminsSize: TypedContractMethod<[], [bigint], "view">;

  getArticleKeysLength: TypedContractMethod<[], [bigint], "view">;

  getBlockTime: TypedContractMethod<[], [bigint], "view">;

  getCitizensSize: TypedContractMethod<[], [bigint], "view">;

  getElectionCandidatesSize: TypedContractMethod<[], [bigint], "view">;

  getElectionVotersSize: TypedContractMethod<[], [bigint], "view">;

  getPoliticalActorsSize: TypedContractMethod<[], [bigint], "view">;

  getVotinCycleIndexesSize: TypedContractMethod<[], [bigint], "view">;

  getVoting: TypedContractMethod<
    [_votingKey: BytesLike],
    [BVS_Voting.VotingStructOutput],
    "view"
  >;

  getVotingKeysLength: TypedContractMethod<[], [bigint], "view">;

  grantCitizenRole: TypedContractMethod<
    [
      _account: AddressLike,
      _emailPublicKeyHash: BytesLike,
      _revokeCitizenRole: boolean
    ],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isContentReadQuizCorrect: TypedContractMethod<
    [
      _answerIndexes: BigNumberish[],
      _readCheckAnswers: BytesLike[],
      _answers: string[]
    ],
    [boolean],
    "view"
  >;

  isEmptyString: TypedContractMethod<[_string: string], [boolean], "view">;

  isVotingWon: TypedContractMethod<
    [_votingKey: BytesLike, _isAWinExpected: boolean],
    [boolean],
    "view"
  >;

  politicalActorVotingCredits: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  politicalActors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proConArticles: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [
      [
        string,
        boolean,
        boolean,
        string,
        string,
        boolean,
        string,
        string,
        string
      ] & {
        votingKey: string;
        isArticleApproved: boolean;
        isResponseApproved: boolean;
        publisher: string;
        articleIpfsHash: string;
        isVoteOnA: boolean;
        responseStatementIpfsHash: string;
        articleContentCheckQuizIpfsHash: string;
        responseContentCheckQuizIpfsHash: string;
      }
    ],
    "view"
  >;

  publishArticleToVotingsCount: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  publishProConArticle: TypedContractMethod<
    [_votingKey: BytesLike, _ipfsHash: string, _isVoteOnA: boolean],
    [void],
    "nonpayable"
  >;

  publishProConArticleResponse: TypedContractMethod<
    [_votingKey: BytesLike, _proConArticleKey: BytesLike, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  revokeAdminRoleApproval: TypedContractMethod<
    [revokedAccount: AddressLike],
    [void],
    "nonpayable"
  >;

  scheduleNewVoting: TypedContractMethod<
    [_contentIpfsHash: string, _startDate: BigNumberish, _budget: BigNumberish],
    [void],
    "nonpayable"
  >;

  scheduleNextElections: TypedContractMethod<
    [_electionsStartDate: BigNumberish, _electionsEndDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendGrantAdministratorRoleApproval: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFirstVotingCycleStartDate: TypedContractMethod<
    [_firstVotingCycleStartDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockVotingBudget: TypedContractMethod<
    [_votingKey: BytesLike],
    [void],
    "nonpayable"
  >;

  updateCitizenshipRoleApplicationFee: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteOnElections: TypedContractMethod<
    [voteOnAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  voteOnVoting: TypedContractMethod<
    [_votingKey: BytesLike, _voteOnA: boolean],
    [void],
    "nonpayable"
  >;

  votes: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [[boolean, boolean] & { voted: boolean; isContentCompleted: boolean }],
    "view"
  >;

  votingContentReadCheckAnswers: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  votingCycleIndexes: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  votingCycleStartVoteCount: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  votingKeys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  votings: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        approved: boolean;
        cancelled: boolean;
        key: string;
        budget: bigint;
        voteCount: bigint;
        creator: string;
        contentIpfsHash: string;
        startDate: bigint;
        voteOnAScore: bigint;
        voteOnBScore: bigint;
        votingContentCheckQuizIpfsHash: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMINISTRATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "APPROVE_VOTING_BEFORE_IT_STARTS_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CITIZEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ELECTION_START_END_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_NEW_CITIZENS_CAN_ADD_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_PERCENTAGE_OF_ELECTION_VOTES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PERCENTAGE_GRANT_ADMIN_APPROVALS_REQUIRED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_PERCENTAGE_OF_VOTES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_TOTAL_CONTENT_READ_CHECK_ANSWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTE_SCORE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NEW_VOTING_PERIOD_MIN_SCHEDULE_AHEAD_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POLITICAL_ACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VOTING_CHECK_ASKED_NUM_OF_QUESTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_CYCLE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addKeccak256HashedAnswersToArticle"
  ): TypedContractMethod<
    [
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _keccak256HashedAnswers: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addKeccak256HashedAnswersToArticleResponse"
  ): TypedContractMethod<
    [
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _keccak256HashedAnswers: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addKeccak256HashedAnswersToVotingContent"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _keccak256HashedAnswers: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminApprovalSentToAccount"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "adminRoleGrantApprovals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "applyForCitizenshipRole"
  ): TypedContractMethod<
    [_emailPublicKeyCombinedHash: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "applyForElections"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "approveVoting"
  ): TypedContractMethod<[_votingKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "articleContentReadCheckAnswers"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "articleContentResponseReadCheckAnswers"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "articleKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "articlesCompleted"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "articlesResponseCompleted"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "assignQuizIpfsHashToArticleOrResponse"
  ): TypedContractMethod<
    [
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _quizIpfsHash: string,
      assignToArticleContent: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignQuizIpfsHashToVoting"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _quizIpfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateVoteScore"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIfAccounthasRole"
  ): TypedContractMethod<
    [_account: AddressLike, _role: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "citizenRoleApplicationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "citizens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "citizenshipApplications"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "closeElections"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeContentReadQuiz"
  ): TypedContractMethod<
    [
      contentType: BigNumberish,
      _votingKey: BytesLike,
      _articleKey: BytesLike,
      _answers: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creationDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyCitizenRoleModifyCredit"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionCandidateScores"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "electionCandidates"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "electionVoters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "electionVotes"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "electionsCandidateApplicationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "electionsEndDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "electionsStartDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstVotingCycleStartDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountArticleQuizAnswerIndexes"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _articleKey: BytesLike, _account: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountArticleResponseQuizAnswerIndexes"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _articleKey: BytesLike, _account: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountVotingQuizAnswerIndexes"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _account: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdminsSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getArticleKeysLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCitizensSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getElectionCandidatesSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getElectionVotersSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoliticalActorsSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotinCycleIndexesSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoting"
  ): TypedContractMethod<
    [_votingKey: BytesLike],
    [BVS_Voting.VotingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingKeysLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantCitizenRole"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _emailPublicKeyHash: BytesLike,
      _revokeCitizenRole: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isContentReadQuizCorrect"
  ): TypedContractMethod<
    [
      _answerIndexes: BigNumberish[],
      _readCheckAnswers: BytesLike[],
      _answers: string[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEmptyString"
  ): TypedContractMethod<[_string: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVotingWon"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _isAWinExpected: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "politicalActorVotingCredits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "politicalActors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proConArticles"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [
      [
        string,
        boolean,
        boolean,
        string,
        string,
        boolean,
        string,
        string,
        string
      ] & {
        votingKey: string;
        isArticleApproved: boolean;
        isResponseApproved: boolean;
        publisher: string;
        articleIpfsHash: string;
        isVoteOnA: boolean;
        responseStatementIpfsHash: string;
        articleContentCheckQuizIpfsHash: string;
        responseContentCheckQuizIpfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishArticleToVotingsCount"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishProConArticle"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _ipfsHash: string, _isVoteOnA: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "publishProConArticleResponse"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _proConArticleKey: BytesLike, _ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAdminRoleApproval"
  ): TypedContractMethod<[revokedAccount: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scheduleNewVoting"
  ): TypedContractMethod<
    [_contentIpfsHash: string, _startDate: BigNumberish, _budget: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scheduleNextElections"
  ): TypedContractMethod<
    [_electionsStartDate: BigNumberish, _electionsEndDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendGrantAdministratorRoleApproval"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFirstVotingCycleStartDate"
  ): TypedContractMethod<
    [_firstVotingCycleStartDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockVotingBudget"
  ): TypedContractMethod<[_votingKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCitizenshipRoleApplicationFee"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteOnElections"
  ): TypedContractMethod<[voteOnAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteOnVoting"
  ): TypedContractMethod<
    [_votingKey: BytesLike, _voteOnA: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [[boolean, boolean] & { voted: boolean; isContentCompleted: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingContentReadCheckAnswers"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingCycleIndexes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingCycleStartVoteCount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "votings"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        approved: boolean;
        cancelled: boolean;
        key: string;
        budget: bigint;
        voteCount: bigint;
        creator: string;
        contentIpfsHash: string;
        startDate: bigint;
        voteOnAScore: bigint;
        voteOnBScore: bigint;
        votingContentCheckQuizIpfsHash: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CitizenshipRoleGranted"
  ): TypedContractEvent<
    CitizenshipRoleGrantedEvent.InputTuple,
    CitizenshipRoleGrantedEvent.OutputTuple,
    CitizenshipRoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "CitizenshipRoleGranted(address,address)": TypedContractEvent<
      CitizenshipRoleGrantedEvent.InputTuple,
      CitizenshipRoleGrantedEvent.OutputTuple,
      CitizenshipRoleGrantedEvent.OutputObject
    >;
    CitizenshipRoleGranted: TypedContractEvent<
      CitizenshipRoleGrantedEvent.InputTuple,
      CitizenshipRoleGrantedEvent.OutputTuple,
      CitizenshipRoleGrantedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
